name: Deploy to Hetzner

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          port: 22
          script: |
            # Navigate to deployment directory
            cd /home/deployer/my-webpage || mkdir -p /home/deployer/my-webpage && cd /home/deployer/my-webpage

            # Clone or pull latest code
            if [ -d ".git" ]; then
              echo "Pulling latest changes..."
              git pull origin main
            else
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }} .
            fi

            # Stop and remove ALL containers (clean slate)
            echo "Stopping and removing all containers..."
            docker stop $(docker ps -aq) 2>/dev/null || echo "No containers to stop"
            docker rm $(docker ps -aq) 2>/dev/null || echo "No containers to remove"

            # Remove unused images, networks, and volumes (optional but recommended)
            echo "Cleaning up Docker resources..."
            docker system prune -f
            docker volume prune -f || echo "No volumes to prune"
            docker network prune -f || echo "No networks to prune"

            # Pull latest images to ensure we have the newest versions
            echo "Pulling latest images..."
            docker-compose pull || echo "Pull completed with warnings"

            # Build and start containers
            echo "Building and starting containers..."
            docker-compose up -d --build --force-recreate

            # Wait a moment for containers to start
            echo "Waiting for containers to start..."
            sleep 10

            # Show running containers and their status
            echo "Deployment complete! Running containers:"
            docker ps

            # Check container health
            echo "Container logs (last 20 lines each):"
            for container in $(docker ps --format "{{.Names}}"); do
              echo "=== $container logs ==="
              docker logs --tail 20 $container
              echo ""
            done
